// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tasks.sql

package postgres_sqlc

import (
	"context"
)

const taskFiveDeleteProject = `-- name: TaskFiveDeleteProject :exec
DELETE FROM projects
WHERE id = 2
`

func (q *Queries) TaskFiveDeleteProject(ctx context.Context) error {
	_, err := q.db.Exec(ctx, taskFiveDeleteProject)
	return err
}

const taskThreeGetITEmployees = `-- name: TaskThreeGetITEmployees :many
SELECT (first_name, last_name) AS full_name
FROM employees
INNER JOIN departments ON employees.department_id = departments.id
WHERE departments.title = 'IT'
`

func (q *Queries) TaskThreeGetITEmployees(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, taskThreeGetITEmployees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var full_name interface{}
		if err := rows.Scan(&full_name); err != nil {
			return nil, err
		}
		items = append(items, full_name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tastFourSetEmployee = `-- name: TastFourSetEmployee :exec
UPDATE employees
SET first_name = 'Robert'
WHERE id = 1
`

func (q *Queries) TastFourSetEmployee(ctx context.Context) error {
	_, err := q.db.Exec(ctx, tastFourSetEmployee)
	return err
}
